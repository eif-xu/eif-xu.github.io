{"meta":{"title":"Mr xu's blog","subtitle":"这是我学习前端的笔记与踩过的坑","description":"blog note","author":"eif","url":"https://eif-xu.github.io"},"pages":[],"posts":[{"title":"关于for...in与for(;;;)的使用","slug":"关于for-in与for-var-i-的使用","date":"2017-04-20T16:08:16.000Z","updated":"2017-04-27T10:46:26.420Z","comments":true,"path":"2017/04/21/关于for-in与for-var-i-的使用/","link":"","permalink":"https://eif-xu.github.io/2017/04/21/关于for-in与for-var-i-的使用/","excerpt":"","text":"关于for….in 与for(var i;;;)的使用对于循环来讲，我在实际上使用这两种写法的时候，并没有特别的关注，但是我在学习的时候，在浙大数据结构网上公开课中讲循环学会的使用for(;;;){}，在js高程，中说for….in是一种精准的迭代语句，多适用于枚举对象的属性，单纯如我，就只在需要遍历对象属性的时候才用。。。 js的语法糖–for_in有一次，我向一慕课讲师，进行请教个关于数组索引值报错的问题，问题的产生解决的过程详见我的踩坑补记，结局很圆满，但是他对我写的循环进行了吐槽，呃我当时是这么写的12345for (var i=0;i&lt;len;i++)&#123; if (apiDate[i][1]&gt;60)&#123; box.push('&lt;li&gt;',[apiDate[i][0],apiDate[i][1]],'&lt;/li&gt;'); &#125; &#125; 他说他进行开发的时候，通常是不使用数组进行保存这种字符串数据段的，而使用json进行处理，而且再进行循环的时候是使用for…in，因为这样代码清晰，笔试的时候一定要用for….in写法，要不然有可能gg。 for(;;;){}—正经的循环这个基本所有跟编程沾边的都非常清楚，js的特殊之处不过是没有块级作用域，就是在循环外可以访问循环内部定义的变量。 我的想法for..in是递归实现遍历，fo(;;;){}是计数循环遍历。12345678910111213141516171819202122232425console.time('定时器1'); function box()&#123; var sum=0; if (arguments.length===0)&#123;return '输入大于0'&#125; for (var i=0;i&lt;arguments.length;i++) &#123; sum+=arguments[i] &#125; return sum; &#125; console.log(box(a)) console.timeEnd('定时器1');console.time('定时器2') function box2()&#123; var sum2=0; var i=0; if (arguments.length===0)&#123;return '输入大于0'&#125; for(var i in arguments)&#123; sum2+=arguments[i]; &#125; return sum2; &#125; console.log(box2(a)); console.timeEnd('定时器2'); 写出两组进行对比。第一次我传进入了3个参数(1,2,3)然后结果如下 呃，结果很明显for…in写法是非常好用的，但是陈越姥姥肯定是对的，那么结论很明显了，一定是传入的参数的值比较少，所以，我传了100个参数~~，还是forin666，当我传入1000个参数时，我预判的临界点确实出现了，for(){}发挥出了，数据结构优点胜出了forin,截图如下 我又传入了10000个参数，但是没有遍历输出，结果如下 总结再写遍历对象属性的时候，还是多使用for…in吧，既简洁又不那么破坏性能","categories":[],"tags":[{"name":"js","slug":"js","permalink":"https://eif-xu.github.io/tags/js/"}]},{"title":"网页meta的好奇分析","slug":"网页meta的好奇分析","date":"2017-04-19T12:54:45.083Z","updated":"2017-04-19T15:30:15.724Z","comments":true,"path":"2017/04/19/网页meta的好奇分析/","link":"","permalink":"https://eif-xu.github.io/2017/04/19/网页meta的好奇分析/","excerpt":"","text":"网页中的关于的分析在参加百度前端学院的时候出于好奇，看了一下百度的页面的源码，关于标签&lt; meta&gt;引起了我的注意，他们写的跟我做练习时不一样啊！摔！我又得重新学习了&lt; meta&gt; 元数据（metadata）是关于数据的信息。 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。—–w3s 上面是w3c对于meta的定义，我又开始对其，如何进行使用进行归纳与查找。 截图分析（1） 1&lt;meta charset=\"utf-8\"&gt; 解析文件格式符 12&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt; &lt;meta name=\"renderer\" content=\"webkit\"&gt; 使用最高版本的浏览器 1&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\"&gt; 屏幕像素等于实际的像素 1&lt;meta name=\"format-detection\" content=\"telephone=no\"&gt; 忽略手机设备将number识别为手机号码 1&lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\"&gt; 网站开启对web app的使用 1&lt;meta name=\"keywords\" content=\"百度, 百度前端, 百度前端学院, 百度前端技术学院, 前端, 前端开发, web前端, 前端开发工程师, CSS, JavaScript, HTML, Web标准\"&gt; 写给百度蜘蛛 1&lt;meta name=\"description\" content=\"百度前端技术学院是面向大学生的前端技术学习平台，由百度创办的免费前端技术学习实践、交流、分享平台\"&gt; 网页内容描述 123456&lt;link rel=\"shortcut icon\" href=\"//ife.baidu.com/2017/asset/common/img/favicon_24c70cf.ico\" type=\"image/x-icon\"&gt; &lt;link rel=\"icon\" href=\"//ife.baidu.com/2017/asset/common/img/favicon_24c70cf.ico\" type=\"image/x-icon\"&gt; &lt;link rel=\"bookmark\" href=\"//ife.baidu.com/2017/asset/common/img/favicon_24c70cf.ico\" type=\"image/x-icon\"&gt; &lt;title&gt;百度前端技术学院&lt;/title&gt; &lt;link href=\"//ife.baidu.com/2017/asset/home/index_80febf1.css\" rel=\"stylesheet\"&gt; &lt;script src=\"//hm.baidu.com/hm.js?d422e3cabaaaa7445e54622b97472bab\"&gt;&lt;/script&gt; 引用各种资源 123456789&lt;script&gt; var _hmt = _hmt || []; (function() &#123; var hm = document.createElement(\"script\"); hm.src = \"//hm.baidu.com/hm.js?d422e3cabaaaa7445e54622b97472bab\"; var s = document.getElementsByTagName(\"script\")[0]; s.parentNode.insertBefore(hm, s); &#125;)(); &lt;/script&gt; 大概是百度统计的检测代码 截图分析（2）","categories":[],"tags":[{"name":"html","slug":"html","permalink":"https://eif-xu.github.io/tags/html/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-04-16T02:04:10.217Z","updated":"2017-04-16T14:29:56.880Z","comments":true,"path":"2017/04/16/hello-world/","link":"","permalink":"https://eif-xu.github.io/2017/04/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}